generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String          @unique
  password      String
  role          String // admin, staff, student
  age           Int?
  education     String?
  community     Community?      @relation(fields: [communityId], references: [id])
  communityId   String?         @db.ObjectId
  news          News[]
  discussions   Discussion[]
  messages      Message[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  UserCommunity UserCommunity[]
}

model UserCommunity {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  community   Community @relation(fields: [communityId], references: [id])
  communityId String    @db.ObjectId
  role        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model News {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Community {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String          @unique
  description   String
  members       User[]
  discussions   Discussion[]
  createdAt     DateTime        @default(now())
  UserCommunity UserCommunity[]
}

model Discussion {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String     @db.ObjectId
  community   Community? @relation(fields: [communityId], references: [id])
  communityId String?    @db.ObjectId
  messages    Message[]
  createdAt   DateTime   @default(now())
}

model Message {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String     @db.ObjectId
  discussion   Discussion @relation(fields: [discussionId], references: [id])
  discussionId String     @db.ObjectId
  role         String // Add this line to include the role field
  createdAt    DateTime   @default(now())

  parentMessageId String?   @unique @db.ObjectId
  ParentMessage   Message?  @relation("messageReplies", fields: [parentMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies         Message[] @relation("messageReplies")
}

model Subscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  endpoint  String   @unique
  keys      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
